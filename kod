import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Константы
G = 6.67430e-11  # Гравитационная постоянная (м^3 кг^-1 с^-2)
M_earth = 5.2915793 * 1022  # Масса Кербина (кг)
R_earth = 600000  # Радиус Кербина (м)
g0 = 9.81  # Ускорение свободного падения (м/с^2)
rho0 = 1.225  # Плотность воздуха на уровне моря (кг/м^3)
M_air = 0.0289644  # Молярная масса воздуха (кг/моль)
R_gas = 8.31446  # Газовая постоянная (Дж/(моль·К))
T = 288.15  # Температура (К)

# Параметры ракеты для каждой ступени
# Первая ступень
m0_1 = 188000  # Начальная масса (кг)
k_1 = 100000  # Скорость расхода топлива (кг/с)
p0_1 = 10000000  # Давление в камере сгорания (Па)
A_1 = 14.3  # Площадь поперечного сечения (м^2)
c_1 = 0.5  # Коэффициент сопротивления
t_1 = 42.63  # Время работы первой ступени (с)

# Вторая ступень
m0_2 = 150000  # Начальная масса (кг)
k_2 = 2500  # Скорость расхода топлива (кг/с)
p0_2 = 8000000  # Давление в камере сгорания (Па)
A_2 = 4.3  # Площадь поперечного сечения (м^2)
c_2 = 0.4  # Коэффициент сопротивления
t_2 = 130.06  # Время работы второй ступени (с)

# Третья ступень
m0_3 = 120000  # Начальная масса (кг)
k_3 = 600  # Скорость расхода топлива (кг/с)
p0_3 = 6000000  # Давление в камере сгорания (Па)
A_3 = 2.3  # Площадь поперечного сечения (м^2)
c_3 = 0.3  # Коэффициент сопротивления
t_3 = 97.31  # Время работы третьей ступени (с)

# Параметры угла наклона
phi0 = np.pi / 2  # Начальный угол (90 градусов - вертикальный запуск)
beta = 0.0005  # Коэффициент изменения угла


# Функции
def calculate_angle(t):
    """Расчет угла наклона ракеты в момент времени t"""
    return max(0, phi0 - beta * t)


def calculate_mass(t):
    """Расчет массы ракеты в момент времени t"""
    if t < t_1:
        # Первая ступень
        return m0_1 - k_1 * t
    elif t < t_1 + t_2:
        # Вторая ступень
        return m0_2 - k_2 * (t - t_1)
    elif t < t_1 + t_2 + t_3:
        # Третья ступень
        return m0_3 - k_3 * (t - t_1 - t_2)
    else:
        # После выгорания всего топлива
        return m0_3 - k_3 * t_3


def calculate_gas_velocity(t, h):
    """Расчет скорости истечения газов"""
    rho = calculate_density(h)

    if t < t_1:
        # Первая ступень
        return np.sqrt(2 * p0_1 / rho)
    elif t < t_1 + t_2:
        # Вторая ступень
        return np.sqrt(2 * p0_2 / rho)
    elif t < t_1 + t_2 + t_3:
        # Третья ступень
        return np.sqrt(2 * p0_3 / rho)
    else:
        # После выгорания всего топлива
        return 0


def calculate_fuel_rate(t):
    """Расчет скорости расхода топлива в момент времени t"""
    if t < t_1:
        # Первая ступень
        return k_1
    elif t < t_1 + t_2:
        # Вторая ступень
        return k_2
    elif t < t_1 + t_2 + t_3:
        # Третья ступень
        return k_3
    else:
        # После выгорания всего топлива
        return 0


def calculate_cross_section(t):
    """Расчет площади поперечного сечения в момент времени t"""
    if t < t_1:
        # Первая ступень
        return A_1
    elif t < t_1 + t_2:
        # Вторая ступень
        return A_2
    else:
        # Третья ступень
        return A_3


def calculate_drag_coef(t):
    """Расчет коэффициента сопротивления в момент времени t"""
    if t < t_1:
        # Первая ступень
        return c_1
    elif t < t_1 + t_2:
        # Вторая ступень
        return c_2
    else:
        # Третья ступень
        return c_3


def calculate_gravity(h):
    """Расчет ускорения свободного падения на высоте h"""
    return g0 * (R_earth / (R_earth + h)) ** 2


def calculate_density(h):
    """Расчет плотности воздуха на высоте h"""
    g = calculate_gravity(h)
    return rho0 * np.exp(-(M_air * g * h) / (R_gas * T))


def rocket_system(t, y):
    """
    Система дифференциальных уравнений для ракеты
    y = [x, y, vx, vy] - координаты и скорости
    """
    x, y_pos, vx, vy = y

    # Вычисляем высоту (расстояние от поверхности Земли)
    h = np.sqrt(x ** 2 + y_pos ** 2) - R_earth
    h = max(0, h)  # Убеждаемся, что высота не отрицательная


    # Вычисляем угол наклона
    phi = calculate_angle(t)

    # Вычисляем массу
    m = calculate_mass(t)

    # Вычисляем скорость истечения газов
    v_gas = calculate_gas_velocity(t, h)

    # Вычисляем скорость расхода топлива
    k = calculate_fuel_rate(t)

    # Вычисляем коэффициент сопротивления и площадь сечения
    c = calculate_drag_coef(t)
    A = calculate_cross_section(t)

    # Вычисляем плотность воздуха
    rho = calculate_density(h)

    # Вычисляем модуль скорости
    v = np.sqrt(vx ** 2 + vy ** 2)

    # Вычисляем ускорения
    if m <= 0:
        ax = 0
        ay = -G * M_earth / ((R_earth + h) ** 2)
    else:
        # Составляющие силы тяги
        F_thrust_x = -v_gas * k * np.sin(phi)
        F_thrust_y = -v_gas * k * np.cos(phi)

        # Составляющие силы сопротивления (упрощенно, действуют против скорости)
        if v > 0:
            F_drag_x = -0.5 * c * rho * vx * v * A
            F_drag_y = -0.5 * c * rho * vy * v * A
        else:
            F_drag_x = 0
            F_drag_y = 0

        # Гравитационная сила
        F_grav_x = -G * m * M_earth * x / ((x ** 2 + y_pos ** 2) ** (3 / 2))
        F_grav_y = -G * m * M_earth * y_pos / ((x ** 2 + y_pos ** 2) ** (3 / 2))

        # Суммарные ускорения
        ax = (F_thrust_x + F_drag_x + F_grav_x) / m
        ay = (F_thrust_y + F_drag_y + F_grav_y) / m

    return [vx, vy, ax, ay]


# Начальные условия: [x0, y0, vx0, vy0]
initial_conditions = [0, R_earth, 0, 0]  # Старт с поверхности Земли с нулевой скоростью

# Временной интервал
t_span = (0, t_1 + t_2 + t_3 + 50)  # Симуляция для всех ступеней
t_eval = np.linspace(t_span[0], t_span[1], 1000)

# Решаем систему
solution = solve_ivp(rocket_system, t_span, initial_conditions, t_eval=t_eval, method='RK45')

# Извлекаем решение
t = solution.t
x = solution.y[0]
y = solution.y[1]
vx = solution.y[2]
vy = solution.y[3]

# Вычисляем высоту
height = np.sqrt(x ** 2 + y ** 2) + R_earth

# Строим графики
plt.figure(figsize=(12, 10))

# График высоты от времени
plt.subplot(2, 1, 1)
plt.plot(t, height / 200)
plt.xlabel('Время (с)')
plt.ylabel('Высота (м)')

plt.title('Высота ракеты от времени')
plt.grid(True)
plt.legend()
plt.show()
